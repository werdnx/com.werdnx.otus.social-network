version: '3.8'

services:
  # ------------------------
  # PostgreSQL Master
  # ------------------------
  postgres-master:
    image: postgres:15
    container_name: pg-master
    restart: always
    environment:
      POSTGRES_USER: otus
      POSTGRES_PASSWORD: otus_pass
      POSTGRES_DB: social_network
    volumes:
      - master_data:/var/lib/postgresql/data
      - ./postgres/master/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/master/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-slave1:
    image: postgres:15
    container_name: pg-slave1
    restart: always
    depends_on:
      - postgres-master
    environment:
      POSTGRES_USER: otus
      POSTGRES_PASSWORD: otus_pass
      # Чтобы pg_basebackup мог использоваться без запроса пароля:
      PGPASSWORD: otus_pass
    volumes:
      - slave1_data:/var/lib/postgresql/data
      - ./postgres/slave1/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5433:5432"
    entrypoint:
      - bash
      - -c
      - |
        set -e
        # Если data-dir пуст — заполняем базу репликой
        if [ ! -s /var/lib/postgresql/data/PG_VERSION ]; then
          pg_basebackup \
            -h postgres-master \
            -D /var/lib/postgresql/data \
            -U otus \
            -vP \
            --wal-method=stream
          # Указываем мастера в конфиге
          echo "primary_conninfo = 'host=postgres-master port=5432 user=otus password=otus_pass'" \
            >> /etc/postgresql/postgresql.conf
          # Создаём сигнал standby
          touch /var/lib/postgresql/data/standby.signal
        fi
        # Запускаем обычный Postgres
        exec docker-entrypoint.sh postgres \
          -c config_file=/etc/postgresql/postgresql.conf

  postgres-slave2:
    image: postgres:15
    container_name: pg-slave2
    restart: always
    depends_on:
      - postgres-master
    environment:
      POSTGRES_USER: otus
      POSTGRES_PASSWORD: otus_pass
      PGPASSWORD: otus_pass
    volumes:
      - slave2_data:/var/lib/postgresql/data
      - ./postgres/slave2/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5434:5432"
    entrypoint:
      - bash
      - -c
      - |
        set -e
        if [ ! -s /var/lib/postgresql/data/PG_VERSION ]; then
          pg_basebackup \
            -h postgres-master \
            -D /var/lib/postgresql/data \
            -U otus \
            -vP \
            --wal-method=stream
          echo "primary_conninfo = 'host=postgres-master port=5432 user=otus password=otus_pass'" \
            >> /etc/postgresql/postgresql.conf
          touch /var/lib/postgresql/data/standby.signal
        fi
        exec docker-entrypoint.sh postgres \
          -c config_file=/etc/postgresql/postgresql.conf

  pg-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: pg-exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://otus:otus_pass@postgres-master:5432/social_network?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres-master

  # ------------------------
  # Prometheus
  # ------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - pg-exporter

  # ------------------------
  # Grafana
  # ------------------------
  grafana:
    image: grafana/grafana:9.0.0
    container_name: grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  master_data:
  slave1_data:
  slave2_data:
