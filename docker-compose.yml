version: '3.8'

services:
  # ------------------------
  # PostgreSQL Master
  # ------------------------
  postgres-master:
    build:
      context: .
      dockerfile: db/Dockerfile
    image: otus-social-db
    container_name: pg-master
    restart: always
    environment:
      POSTGRES_USER: otus
      POSTGRES_PASSWORD: otus_pass
      POSTGRES_DB: social_network_rep
    volumes:
      - master_data:/var/lib/postgresql/data
      - ./postgres/master/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/master/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./db/data:/data
    ports:
      - "5432:5432"
    command: >
        postgres
          -c config_file=/etc/postgresql/postgresql.conf
          -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-slave1:
    image: postgres:15
    container_name: pg-slave1
    restart: always
    depends_on:
      - postgres-master
    environment:
      POSTGRES_USER: otus
      POSTGRES_PASSWORD: otus_pass
      POSTGRES_DB: social_network_rep
      PGPASSWORD: otus_pass
      PGDATA: /var/lib/postgresql/data
    volumes:
      - slave1_data:/var/lib/postgresql/data
      - ./postgres/slave1/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5433:5432"
    entrypoint:
      - bash
      - -c
      - |
        set -euo pipefail
        
        echo '‚è≥ Waiting for master to be ready‚Ä¶'
        until pg_isready -h postgres-master -p 5432 -U otus -d social_network_rep; do
          sleep 1
        done
        
        if [ ! -s /var/lib/postgresql/data/PG_VERSION ]; then
          echo 'üåÄ Initializing replica via pg_basebackup‚Ä¶'
          PGPASSWORD=otus_pass pg_basebackup \
            --host=postgres-master \
            --port=5432 \
            --username=otus \
            --pgdata=/var/lib/postgresql/data \
            --verbose \
            --wal-method=stream
        
          echo '‚úîÔ∏è Configuring standby‚Ä¶'
          echo "primary_conninfo = 'host=postgres-master port=5432 user=otus password=otus_pass'" >> /var/lib/postgresql/data/postgresql.auto.conf

          touch /var/lib/postgresql/data/standby.signal
        fi
  
        echo 'üöÄ Launching PostgreSQL‚Ä¶'
        exec docker-entrypoint.sh postgres -c config_file=/etc/postgresql/postgresql.conf

  postgres-slave2:
    image: postgres:15
    container_name: pg-slave2
    restart: always
    depends_on:
      - postgres-master
    environment:
      POSTGRES_USER: otus
      POSTGRES_PASSWORD: otus_pass
      PGPASSWORD: otus_pass
      POSTGRES_DB: social_network_rep
      PGDATA: /var/lib/postgresql/data
    volumes:
      - slave2_data:/var/lib/postgresql/data
      - ./postgres/slave2/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5434:5432"
    entrypoint:
      - bash
      - -c
      - |
        set -euo pipefail
        
        echo '‚è≥ Waiting for master to be ready‚Ä¶'
        until pg_isready -h postgres-master -p 5432 -U otus -d social_network_rep; do
          sleep 1
        done
        
        if [ ! -s /var/lib/postgresql/data/PG_VERSION ]; then
          echo 'üåÄ Initializing replica via pg_basebackup‚Ä¶'
          PGPASSWORD=otus_pass pg_basebackup \
            --host=postgres-master \
            --port=5432 \
            --username=otus \
            --pgdata=/var/lib/postgresql/data \
            --verbose \
            --wal-method=stream
        
          echo '‚úîÔ∏è Configuring standby‚Ä¶'
          echo "primary_conninfo = 'host=postgres-master port=5432 user=otus password=otus_pass'" >> /var/lib/postgresql/data/postgresql.auto.conf

          touch /var/lib/postgresql/data/standby.signal
        fi
        
        echo 'üöÄ Launching PostgreSQL‚Ä¶'
        exec docker-entrypoint.sh postgres -c config_file=/etc/postgresql/postgresql.conf

  pg-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: pg-exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://otus:otus_pass@postgres-master:5432/social_network_rep?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres-master

  pg-exporter-slave1:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: pg-exporter-slave1
    restart: always
    environment:
      # –Ω–∞—Ü–µ–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–µ–π–≤–∞
      DATA_SOURCE_NAME: "postgresql://otus:otus_pass@postgres-slave1:5432/social_network_rep?sslmode=disable"
    ports:
      - "9188:9187"     # –≤–Ω–µ—à–Ω–∏–π 9188 ‚Üí –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ 9187
    depends_on:
      - postgres-slave1

  pg-exporter-slave2:
    image: quay.io/prometheuscommunity/postgres-exporter:latest
    container_name: pg-exporter-slave2
    restart: always
    environment:
      # –Ω–∞—Ü–µ–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–ª–µ–π–≤–∞
      DATA_SOURCE_NAME: "postgresql://otus:otus_pass@postgres-slave2:5432/social_network_rep?sslmode=disable"
    ports:
      - "9189:9187"     # –≤–Ω–µ—à–Ω–∏–π 9189 ‚Üí –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ 9187
    depends_on:
      - postgres-slave2

  # ------------------------
  # Prometheus
  # ------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - pg-exporter

  # ------------------------
  # Grafana
  # ------------------------
  grafana:
    image: grafana/grafana:9.0.0
    container_name: grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/provisioning/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
  app:
    build: .
    container_name: social-network-app
    depends_on:
      - postgres-master
      - postgres-slave1
      - postgres-slave2
    environment:
      # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º—ã–µ DataSource: master
      SPRING_DATASOURCE_MASTER_URL: jdbc:postgresql://postgres-master:5432/social_network_rep
      SPRING_DATASOURCE_MASTER_USERNAME: otus
      SPRING_DATASOURCE_MASTER_PASSWORD: otus_pass
      # slave (–¥—Ä–∞–π–≤–µ—Ä PostgreSQL —É–º–µ–µ—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å)
      SPRING_DATASOURCE_SLAVE_URL: jdbc:postgresql://postgres-slave1:5432,postgres-slave2:5432/social_network_rep?targetServerType=slave&loadBalanceHosts=true
      SPRING_DATASOURCE_SLAVE_USERNAME: otus
      SPRING_DATASOURCE_SLAVE_PASSWORD: otus_pass
    ports:
      - "8080:8080"
volumes:
  master_data:
  slave1_data:
  slave2_data:
